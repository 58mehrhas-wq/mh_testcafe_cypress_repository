"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = exports.waitUntilDisplayed = exports.scrollIntoView = exports.hover = exports.type = exports.click = exports.takeScreenshot = exports.visit = exports.getUrl = exports.getTitle = exports.getDriverInfo = exports.setViewportSize = exports.findElements = exports.findElement = exports.childContext = exports.mainContext = exports.executeScript = exports.isStaleElementError = exports.extractSelector = exports.transformSelector = exports.transformElement = exports.isSelector = exports.isElement = exports.isDriver = void 0;
const testcafe = require("testcafe");
const fs = require("fs");
const utils = require("@applitools/utils");
function XPathSelector(selector, options) {
    const getElementsByXPath = testcafe.Selector(xpath => {
        const iterator = document.evaluate(xpath, document, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
        const items = [];
        let item = iterator.iterateNext();
        while (item) {
            items.push(item);
            item = iterator.iterateNext();
        }
        return items;
    }, options);
    return testcafe.Selector(getElementsByXPath(selector), options);
}
function deserializeResult(result, elements) {
    if (!result) {
        return result;
    }
    else if (result.isElement) {
        return elements.shift();
    }
    else if (utils.types.isArray(result)) {
        return result.map(result => deserializeResult(result, elements));
    }
    else if (utils.types.isObject(result)) {
        return Object.entries(result).reduce((object, [key, value]) => {
            return Object.assign(object, { [key]: deserializeResult(value, elements) });
        }, {});
    }
    else {
        return result;
    }
}
const scriptRunner = testcafe.ClientFunction(() => {
    const { script, arg } = input;
    const func = new Function(script.startsWith('function') ? `return (${script}).apply(null, arguments)` : script);
    const elements = [];
    const result = serializeResult(func(deserializeArg(arg)));
    const resultId = elements.length > 0 ? String(Math.floor(Math.random() * 1000)) : null;
    if (resultId) {
        const APPLITOOLS_NAMESPACE = '__TESTCAFE_EYES_APPLITOOLS__';
        const global = window;
        if (!global[APPLITOOLS_NAMESPACE])
            global[APPLITOOLS_NAMESPACE] = {};
        global[APPLITOOLS_NAMESPACE][resultId] = elements;
    }
    return { result, resultId, elementsCount: elements.length };
    function deserializeArg(arg) {
        if (!arg) {
            return arg;
        }
        else if (typeof arg === 'function') {
            return arg();
        }
        else if (Array.isArray(arg)) {
            return arg.map(deserializeArg);
        }
        else if (typeof arg === 'object') {
            return Object.entries(arg).reduce((object, [key, value]) => {
                return Object.assign(object, { [key]: deserializeArg(value) });
            }, {});
        }
        else {
            return arg;
        }
    }
    function serializeResult(result) {
        if (!result) {
            return result;
        }
        else if (result instanceof window.HTMLElement) {
            elements.push(result);
            return { isElement: true };
        }
        else if (Array.isArray(result)) {
            return result.map(serializeResult);
        }
        else if (typeof result === 'object') {
            return Object.entries(result).reduce((object, [key, value]) => {
                return Object.assign(object, { [key]: serializeResult(value) });
            }, {});
        }
        else {
            return result;
        }
    }
});
const elementsExtractor = testcafe.Selector(() => {
    const { resultId } = input;
    const APPLITOOLS_NAMESPACE = '__TESTCAFE_EYES_APPLITOOLS__';
    const global = window;
    if (!global[APPLITOOLS_NAMESPACE] || !global[APPLITOOLS_NAMESPACE][resultId])
        return [];
    const elements = global[APPLITOOLS_NAMESPACE][resultId];
    return elements;
});
function isDriver(t) {
    return utils.types.instanceOf(t, 'TestController');
}
exports.isDriver = isDriver;
function isElement(element) {
    var _a, _b, _c;
    if (!element)
        return false;
    return Boolean((element.addCustomMethods && element.find && element.parent) ||
        (element.nodeType && ((_a = element.selector) === null || _a === void 0 ? void 0 : _a.addCustomMethods) && ((_b = element.selector) === null || _b === void 0 ? void 0 : _b.find) && ((_c = element.selector) === null || _c === void 0 ? void 0 : _c.parent)));
}
exports.isElement = isElement;
function isSelector(selector) {
    if (!selector)
        return;
    return Boolean(selector.addCustomMethods && selector.find && selector.parent);
}
exports.isSelector = isSelector;
function transformElement(element) {
    return utils.types.isFunction(element.selector) ? element.selector : element;
}
exports.transformElement = transformElement;
function transformSelector(selector) {
    if (utils.types.has(selector, 'selector')) {
        let current = selector;
        let transformed = selector.type === 'xpath' ? XPathSelector(current.selector) : testcafe.Selector(current.selector);
        while (current.shadow) {
            current = utils.types.has(current.shadow, 'selector') ? current.shadow : { selector: current.shadow };
            transformed = transformed.shadowRoot().find(current.selector);
        }
        return transformed;
    }
    return testcafe.Selector(selector);
}
exports.transformSelector = transformSelector;
function extractSelector(element) {
    return utils.types.isFunction(element.selector) ? element.selector : element;
}
exports.extractSelector = extractSelector;
function isStaleElementError(_err) {
    return false;
}
exports.isStaleElementError = isStaleElementError;
async function executeScript(t, script, arg) {
    script = utils.types.isFunction(script) ? script.toString() : script;
    const { result, resultId, elementsCount } = await scriptRunner.with({
        boundTestRun: t,
        dependencies: { input: { script, arg } },
    })();
    if (!result || !resultId)
        return result;
    const elements = elementsExtractor.with({
        boundTestRun: t,
        dependencies: { input: { resultId } },
    });
    return deserializeResult(result, Array.from({ length: elementsCount }, (_, index) => elements.nth(index)));
}
exports.executeScript = executeScript;
async function mainContext(t) {
    await t.switchToMainWindow();
    return t;
}
exports.mainContext = mainContext;
async function childContext(t, element) {
    await t.switchToIframe(element);
    return t;
}
exports.childContext = childContext;
async function findElement(t, selector) {
    const element = await selector.with({ boundTestRun: t })();
    return element ? element.selector : null;
}
exports.findElement = findElement;
async function findElements(t, selector) {
    const elements = selector.with({ boundTestRun: t });
    return Array.from({ length: await elements.count }, (_, index) => elements.nth(index));
}
exports.findElements = findElements;
async function setViewportSize(t, size) {
    await t.resizeWindow(size.width, size.height);
}
exports.setViewportSize = setViewportSize;
async function getDriverInfo(_t) {
    return { features: { shadowSelector: true } };
}
exports.getDriverInfo = getDriverInfo;
async function getTitle(t) {
    try {
        return await testcafe.Selector('title', { boundTestRun: t }).innerText;
    }
    catch (error) {
        return '';
    }
}
exports.getTitle = getTitle;
async function getUrl(t) {
    const getUrl = testcafe.ClientFunction(() => document.location.href, {
        boundTestRun: t,
    });
    return getUrl();
}
exports.getUrl = getUrl;
async function visit(t, url) {
    await t.navigateTo(url);
}
exports.visit = visit;
async function takeScreenshot(t) {
    const screenshotPath = await t.takeScreenshot({
        path: `.applitools/${utils.general.guid()}.png`,
    });
    try {
        return fs.readFileSync(screenshotPath);
    }
    finally {
        fs.unlinkSync(screenshotPath);
    }
}
exports.takeScreenshot = takeScreenshot;
async function click(t, element) {
    if (isSelector(element))
        element = await findElement(t, element);
    await t.click(element);
}
exports.click = click;
async function type(t, element, keys) {
    if (isSelector(element))
        element = await findElement(t, element);
    await t.typeText(element, keys);
}
exports.type = type;
async function hover(t, element) {
    if (isSelector(element))
        element = await findElement(t, element);
    await t.hover(element);
}
exports.hover = hover;
async function scrollIntoView(t, element, align = false) {
    if (isSelector(element))
        element = await findElement(t, element);
    const scrollIntoView = testcafe.ClientFunction(() => element().scrollIntoView(align), {
        boundTestRun: t,
        dependencies: { element, align },
    });
    await scrollIntoView();
}
exports.scrollIntoView = scrollIntoView;
async function waitUntilDisplayed(t, selector) {
    await selector.with({ boundTestRun: t, visibilityCheck: true });
}
exports.waitUntilDisplayed = waitUntilDisplayed;
function build() {
    return [undefined, () => void 0];
}
exports.build = build;
